{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","textAreaStyles","width","height","margin","RazzList","props","state","numberOfSpots","userInput","memberList","fullList","changeNumberOfSpots","bind","changeInputText","submitMembers","makeList","e","this","setState","target","value","membersArray","split","full","items","i","length","name","match","join","numSpots","j","splice","Math","random","push","members","map","spots","type","onChange","style","placeholder","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,qICGrCC,G,YAAiB,CACrBC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IAoGKC,E,kDAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,cAAe,EACfC,UAAW,GACXC,WAAY,GACZC,SAAU,IAIZ,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,SAAW,EAAKA,SAASH,KAAd,gBAbC,E,gEAkBCI,GAClBC,KAAKC,SAAS,CACZX,cAAeS,EAAEG,OAAOC,U,sCAGZJ,GACdC,KAAKC,SAAS,CACZV,UAAWQ,EAAEG,OAAOC,U,sCAItB,IAAMC,EAAeJ,KAAKX,MAAME,UAAUc,MAAM,cAChDL,KAAKC,SAAS,CACZT,WAAYY,M,iCAOd,IAFA,IAAIE,EAAO,GACPC,EAAQP,KAAKX,MAAMG,WACfgB,EAAI,EAAGA,EAAED,EAAME,OAAQD,IAG7B,IAFA,IAAIE,EAAOH,EAAMC,GAAGG,MAAM,OAAOC,KAAK,IAClCC,EAAWN,EAAMC,GAAGG,MAAM,OAAOC,KAAK,IAClCE,EAAI,EAAGA,EAAED,EAAUC,IAEzBR,EAAKS,OAAOC,KAAKC,SAAWX,EAAKG,OAAQ,EAAGC,GAGhD,IAAI,IAAIF,EAAE,EAAGA,EAAER,KAAKX,MAAMC,cAAckB,IACtCF,EAAKY,KAAK,SAOZlB,KAAKC,SAAS,CACZR,SAAWa,M,+BAKb,IAAMa,EAAUnB,KAAKX,MAAMG,WAAW4B,KAAI,SAAAZ,GAAC,OAAI,4BAAKA,MAC9Ca,EAAQrB,KAAKX,MAAMI,SAAS2B,KAAI,SAAAZ,GAAC,OAAI,4BAAKA,MAChD,OACE,6BACE,8BACC,2DAEG,2BACEc,KAAK,SACLnB,MAAOH,KAAKX,MAAMC,cAClBiC,SAAUvB,KAAKN,wBAInB,6BACA,6BACA,8BACE6B,SAAUvB,KAAKJ,gBACfO,MAAOH,KAAKX,MAAME,UAClBiC,MAAOzC,EACP0C,YAAa,6HAGjB,6BACA,4BAAQC,QAAS1B,KAAKH,eAAtB,gBACA,4BACGsB,GAEH,4BAAQO,QAAS1B,KAAKF,UAAtB,cACA,4BACGuB,Q,GA3FYM,IAAMC,WCGTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCZNsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b050ae9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst textAreaStyles = {\n  width: 230,\n  height: 150,\n  margin: 0\n};\n\nclass RazzList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfSpots: 0,\n      userInput: '',\n      memberList: [],\n      fullList: []\n    }\n    \n   \n    this.changeNumberOfSpots = this.changeNumberOfSpots.bind(this);\n    this.changeInputText = this.changeInputText.bind(this);\n    this.submitMembers = this.submitMembers.bind(this);\n    this.makeList = this.makeList.bind(this);\n  }\n  \n  \n  \n  changeNumberOfSpots(e) {\n    this.setState({\n      numberOfSpots: e.target.value\n    });\n  }\n  changeInputText(e){\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  submitMembers() {\n    const membersArray = this.state.userInput.split(/\\r\\n|\\n|\\r/);\n    this.setState({\n      memberList: membersArray\n    });\n  }\n\n  makeList(){\n    let full = [];\n    let items = this.state.memberList;\n    for(let i = 0; i<items.length; i++){\n      let name = items[i].match(/\\D/g).join('');\n      let numSpots = items[i].match(/\\d/g).join('');\n      for(let j = 0; j<numSpots; j++)\n      {\n        full.splice(Math.random() * full.length, 0, name);\n      }\n    }\n    for(let i=0; i<this.state.numberOfSpots;i++){\n      full.push(\"Video\");\n    }\n    /**\n    for(let i = 0; i< full.length; i++){\n      full[i] = (i+1).toString() + \". \" + full[i];\n    }\n    */\n    this.setState({\n      fullList : full\n    });\n  }\n\n  render() {\n    const members = this.state.memberList.map(i => <li>{i}</li>);\n    const spots = this.state.fullList.map(i => <li>{i}</li>);\n    return (\n      <div>\n        <form>\n         <label>\n            Number of spots to Video:\n            <input\n              type=\"number\"\n              value={this.state.numberOfSpots}\n              onChange={this.changeNumberOfSpots} />\n          </label>\n       \n       </form>\n          <br />\n          <br />\n          <textarea\n            onChange={this.changeInputText}\n            value={this.state.userInput}\n            style={textAreaStyles}\n            placeholder={\"Enter the quantities, each in a new line:\\n(only do this with a full list, no called spots) \\nRodney 12\\nJake 4\\nMonty 8\"}  />\n        \n\n        <br />\n        <button onClick={this.submitMembers}>Show Members</button>\n        <ul>\n          {members}\n        </ul>\n        <button onClick={this.makeList}>Show Spots</button>\n        <ol>\n          {spots}\n        </ol>\n      </div>\n    );\n  }\n};\nexport default RazzList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}